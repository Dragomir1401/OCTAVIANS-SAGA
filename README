_____________________________________________
__________________Copyright__________________

                Dragomir Andrei 2022
____________________________________________________________________________
----------------------------------------------------------------------------
Name: Dragomir Andrei

Class: 322CA
____________________________________________________________________________
----------------------------------------------------------------------------
--------------------------------_OCTAVIAN'S SAGA_---------------------------
----------------------------------------------------------------------------



----------------------------------------------------------------------------


____________Description____________


This project represents a simple suite of solvers for a very specific problem:

Choosing a minimum number of decks to cover wanted cards. Each deck mai contain
random amount of cards. We need to find a minimum number of decks in order to
have the wanted collection complete.


We have as base a SAT problem solver which know to solve only a task efficiently:

Finding true variables in clauses to see if condition given can be fulfilled.

    There are different stages of this project:


    1 -- Trial - a test for the SAT problem solver and base for Rise


    2 -- Rise - actual solver of the problematic with the SAT solver


    3 -- Redemption - a Greedy solution which aproximates the minimum of
    sets needed to fulfill the wanted list




-----------------------------------------------------------------------------




------------------------------------------------------------------------------


____________Implementation____________

--------------------------------------_TRIAL_---------------------------------

    Trial is just a test for the Oracle given(the SAT problem solver).
    The implementation consists of creating the sat.cnf file which is send
    to the Oracle for interpretation.


    Clauses are separated in:

                                 * Clauses *
                                     ||
    /-----------------/-------------------\-------------------\------------\
    |
    | Clauses for first possible element, second, ..., k-th possible element.
    |
    |-----------------/-------------------\-------------------\------------\
    |
    | Clauses for maximum one choosing of set i for each i ranging 1...n.
    |
    |-----------------/-------------------\-------------------\------------\
    |
    | Clauses for choosing only one set for each position ranging 1...k.
    |
    |-----------------/-------------------\-------------------\------------\
    |
    | Clause to choose at least one set that contains each element seeked.
    |
    |-----------------/-------------------\-------------------\------------\


    Clauses are consecutive numbers which range 1, 2, 3...m on first row, then
    m, m + 1, m + 2 ... 2 * m on second row
    .....
    (k - 1) * m, (k - 1) * m + 1, (k - 1) * m + 2 ... k * m on k-th row.

For a simple example of created clauses explanation looks like:

    p cnf 6 15              where input was:
    1 2 3 0                     4 3 2               meaning n = 4 seeked set size
    4 5 6 0                     2 1 2                       m = 3 number of sets given
    -1 -4 0                     3 2 3 4                     k = 2 number of sets wanted
    -2 -5 0                     2 2 3
    -3 -6 0
    -1 -2 0
    -1 -3 0
    -2 -3 0
    -4 -5 0
    -4 -6 0
    -5 -6 0
    1 4 0
    1 4 2 5 3 6 0
    2 5 3 6 0
    2 5 0


    0 ends a valid clause


    *
    1 2 3 0 means that for first position of the seeked sets can be ocuppied by
    one of the three given sets

    4 5 6 0 means that for second position of the seeked sets can be ocuppied by
    one of the three given sets
    *

    *
    -1 -4 0 means that we cant choose set 1 for more than one position

    -2 -5 0 means that we cant choose set 2 for more than one position

    -3 -6 0 means that we cant choose set 3 for more than one position
    *

    *
    -1 -2 0 means that we cannot choose set 1 and set 2 on the same first position

    -1 -3 0 means that we cannot choose set 1 and set 3 on the same first position

    -2 -3 0 means that we cannot choose set 2 and set 3 on the same first position

    -4 -5 0 means that we cannot choose set 1 and set 2 on the same second position

    -4 -6 0 means that we cannot choose set 1 and set 3 on the same second position

    -5 -6 0 means that we cannot choose set 2 and set 3 on the same second position
    *

    *
    Number 1 is contained by only set 1:
    1 4 0 means that we have to choose set 1 for either of the positions

    Number 2 is contained by all 3 sets:
    1 4 2 5 3 6 0 means that we have to choose set 1, set 2 or set 3 for either of the positions

    Number 3 is contained by only set 2 and 3:
    2 5 3 6 0 means that we have to choose set 2 or set 3 for either of the positions

    Number 4 is contained by only set 2:
    2 5 0 means that we have to choose set 2 for either of the positions


    Finding what sets contain each element is done by storing a list of a class
    which contains the value and what sets have that value in it.
    *



--------------------------------------_RISE_----------------------------------

    Rise represents the solving of the actual practical problem using what we have done
    with the trial. We use the same logic in order to find the minimum value of k,
    meaning that we find the minimum number of sets needed to complete the wanted
    list of cards for Octavian.



--------------------------------------_REDEMPTION_-----------------------------

    Rise represents the Greedy solving of the problem. It can only aproximate
    the needed solution.

    The algorithm consists of finding each time the best deck to buy, meaning
    the one which contains the most wanted cards. We do that until the wanted
    list becomes empty. The solution consists of the best sets used until
    we find all the cards needed.

    It does not give the minimum number for each
    case, as it is obvious that there are cases where there is a combination
    of fewer decks that are not the best options but create the wanted list.

------------------------------------------------------------------------------





------------------------------------------------------------------------------

_____________Comments_____________


The implementation could have been done better based on the generality of
the code. Besides this I could have made a more modularized approach.

The code could have been written way faster if explanation of how the SAT
solver works was better explained. Either way it was decent like this, but
I personally had a hard time understanding that the clauses are given
very well by example in the requirements.


------------------------------------------------------------------------------





-----------------------------------------------------------------------------


Resources:

https://github.com/RaduNichita/tema2-aa-public

https://www.borealisai.com/research-blogs/tutorial-9-sat-solvers-i-introduction-and-applications/#:~:text=A%20SAT%20solver%20is%20an,that%20no%20such%20combination%20exists.


-----------------------------------------------------------------------------